[{"E:\\1code\\mesto-react\\src\\index.js":"1","E:\\1code\\mesto-react\\src\\components\\App.jsx":"2","E:\\1code\\mesto-react\\src\\components\\Header.jsx":"3","E:\\1code\\mesto-react\\src\\components\\ImagePopup.jsx":"4","E:\\1code\\mesto-react\\src\\components\\Footer.jsx":"5","E:\\1code\\mesto-react\\src\\components\\PopupWithForm.jsx":"6","E:\\1code\\mesto-react\\src\\components\\Main.jsx":"7","E:\\1code\\mesto-react\\src\\components\\Card.jsx":"8","E:\\1code\\mesto-react\\src\\utils\\Api.js":"9","E:\\1code\\mesto-react\\src\\contexts\\CurrentUserContext.js":"10"},{"size":246,"mtime":1612342075193,"results":"11","hashOfConfig":"12"},{"size":5853,"mtime":1613023779482,"results":"13","hashOfConfig":"12"},{"size":302,"mtime":1612344273715,"results":"14","hashOfConfig":"12"},{"size":650,"mtime":1612344271802,"results":"15","hashOfConfig":"12"},{"size":185,"mtime":1612344317042,"results":"16","hashOfConfig":"12"},{"size":758,"mtime":1612344268397,"results":"17","hashOfConfig":"12"},{"size":2704,"mtime":1613040930392,"results":"18","hashOfConfig":"12"},{"size":1661,"mtime":1613024877758,"results":"19","hashOfConfig":"12"},{"size":2982,"mtime":1612524082854,"results":"20","hashOfConfig":"12"},{"size":90,"mtime":1612937922546,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1b14l14",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"E:\\1code\\mesto-react\\src\\index.js",[],["45","46"],"E:\\1code\\mesto-react\\src\\components\\App.jsx",["47","48"],"import { useState, useEffect } from 'react';\r\nimport '../index.css';\r\nimport Header from './Header.jsx';\r\nimport Main from './Main.jsx';\r\nimport Footer from './Footer.jsx';\r\nimport PopupWithForm from './PopupWithForm.jsx';\r\nimport ImagePopup from './ImagePopup.jsx';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext.js';\r\nimport api from '../utils/Api.js';\r\n\r\nfunction App() {\r\n  {\r\n    /* Стейты и функции попапов */\r\n  }\r\n  const [isEditProfilePopupOpen, setEditProfilePopupOpen] = useState(false);\r\n  const [isAddPlacePopupOpen, setAddPlacePopupOpen] = useState(false);\r\n  const [isEditAvatarPopupOpen, setEditAvatarPopupOpen] = useState(false);\r\n  const [isImagePopupOpen, setImagePopupOpen] = useState(false);\r\n  const [selectedCard, setSelectedCard] = useState({});\r\n\r\n  function handleEditProfileClick() {\r\n    setEditProfilePopupOpen(true);\r\n  }\r\n\r\n  function handleAddPlaceClick() {\r\n    setAddPlacePopupOpen(true);\r\n  }\r\n\r\n  function handleEditAvatarClick() {\r\n    setEditAvatarPopupOpen(true);\r\n  }\r\n\r\n  function handleCardClick(card) {\r\n    setSelectedCard({\r\n      ...selectedCard,\r\n      link: card.link,\r\n      name: card.name,\r\n    });\r\n    setImagePopupOpen(true);\r\n  }\r\n\r\n  function closeAllPopups() {\r\n    setEditProfilePopupOpen(false);\r\n    setAddPlacePopupOpen(false);\r\n    setEditAvatarPopupOpen(false);\r\n    setImagePopupOpen(false);\r\n  }\r\n\r\n  {\r\n    /*Стейт пользователя*/\r\n  }\r\n\r\n  const [currentUser, setCurrentUser] = useState({\r\n    name: '',\r\n    about: '',\r\n    avatar: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    api.getUserInfo().then((user) => {\r\n      setCurrentUser(user);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <CurrentUserContext.Provider value={currentUser}>\r\n      <div className=\"page\">\r\n        <Header />\r\n        <Main\r\n          onEditProfile={handleEditProfileClick}\r\n          onAddPlace={handleAddPlaceClick}\r\n          onEditAvatar={handleEditAvatarClick}\r\n          onCardClick={handleCardClick}\r\n        />\r\n        <Footer />\r\n\r\n        {/* Попап редактирования профиля */}\r\n        <PopupWithForm\r\n          name=\"profile\"\r\n          title=\"Редактировать профиль\"\r\n          buttonText=\"Сохранить\"\r\n          isOpen={isEditProfilePopupOpen}\r\n          onClose={closeAllPopups}\r\n        >\r\n          <fieldset name=\"user\" className=\"popup__info\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Имя\"\r\n              name=\"name\"\r\n              required=\"\"\r\n              minLength=\"2\"\r\n              maxLength=\"40\"\r\n              className=\"popup__input popup__input_type_name\"\r\n              id=\"profile-name-input\"\r\n            />\r\n            <span\r\n              className=\"popup__input-error\"\r\n              id=\"profile-name-input-error\"\r\n            ></span>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Род занятий\"\r\n              name=\"job\"\r\n              required=\"\"\r\n              minLength=\"2\"\r\n              maxLength=\"200\"\r\n              className=\"popup__input popup__input_type_occupation\"\r\n              id=\"profie-occupation-input\"\r\n            />\r\n            <span\r\n              className=\"popup__input-error\"\r\n              id=\"profie-occupation-input-error\"\r\n            ></span>\r\n          </fieldset>\r\n        </PopupWithForm>\r\n\r\n        {/* Попап добавления карточки */}\r\n        <PopupWithForm\r\n          name=\"card\"\r\n          title=\"Новое место\"\r\n          buttonText=\"Создать\"\r\n          isOpen={isAddPlacePopupOpen}\r\n          onClose={closeAllPopups}\r\n        >\r\n          <fieldset name=\"card\" className=\"popup__info\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Название\"\r\n              name=\"name\"\r\n              required=\"\"\r\n              minLength=\"2\"\r\n              maxLength=\"30\"\r\n              className=\"popup__input popup__input_type_title\"\r\n              id=\"card-title-input\"\r\n            />\r\n            <span\r\n              className=\"popup__input-error\"\r\n              id=\"card-title-input-error\"\r\n            ></span>\r\n            <input\r\n              type=\"url\"\r\n              placeholder=\"Ссылка на изображение\"\r\n              name=\"link\"\r\n              required=\"\"\r\n              className=\"popup__input popup__input_type_url\"\r\n              id=\"card-url-input\"\r\n            />\r\n            <span\r\n              className=\"popup__input-error\"\r\n              id=\"card-url-input-error\"\r\n            ></span>\r\n          </fieldset>\r\n        </PopupWithForm>\r\n\r\n        {/* Попап редактирования аватара */}\r\n        <PopupWithForm\r\n          name=\"avatar\"\r\n          title=\"Обновить аватар\"\r\n          buttonText=\"Сохранить\"\r\n          isOpen={isEditAvatarPopupOpen}\r\n          onClose={closeAllPopups}\r\n        >\r\n          <fieldset name=\"avatar\" className=\"popup__info\">\r\n            <input\r\n              type=\"url\"\r\n              placeholder=\"Ссылка на изображение\"\r\n              name=\"link\"\r\n              required=\"\"\r\n              className=\"popup__input popup__input_avatar popup__input_type_url\"\r\n              id=\"avatar-url-input\"\r\n            />\r\n            <span\r\n              className=\"popup__input-error\"\r\n              id=\"avatar-url-input-error\"\r\n            ></span>\r\n          </fieldset>\r\n        </PopupWithForm>\r\n\r\n        <ImagePopup\r\n          isOpen={isImagePopupOpen}\r\n          onClose={closeAllPopups}\r\n          card={selectedCard}\r\n        />\r\n\r\n        {/* Попап удаления карточки */}\r\n        <PopupWithForm name=\"remove\" title=\"Вы уверены?\" buttonText=\"Да\" />\r\n      </div>\r\n    </CurrentUserContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\1code\\mesto-react\\src\\components\\Header.jsx",[],"E:\\1code\\mesto-react\\src\\components\\ImagePopup.jsx",[],"E:\\1code\\mesto-react\\src\\components\\Footer.jsx",[],"E:\\1code\\mesto-react\\src\\components\\PopupWithForm.jsx",[],"E:\\1code\\mesto-react\\src\\components\\Main.jsx",["49"],"E:\\1code\\mesto-react\\src\\components\\Card.jsx",["50","51","52","53"],"import { useContext } from 'react';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext.js';\r\n\r\nfunction Card(props) {\r\n  const currentUser = useContext(CurrentUserContext);\r\n\r\n  const isOwn = props.card.owner._id === currentUser._id;\r\n\r\n  {\r\n    /* Удаление */\r\n  }\r\n  const cardRemoveButtonClassName = `card__remove-button ${\r\n    isOwn ? 'card__remove-button_visible' : ''\r\n  }`;\r\n\r\n  {\r\n    /* Лайк */\r\n  }\r\n  const isLiked = props.card.likes.some((i) => i._id === currentUser._id);\r\n  const cardLikeButtonClassName = `card__like-button ${\r\n    isLiked ? 'card__like-button_active' : ''\r\n  }`;\r\n\r\n  function handleClick() {\r\n    props.onCardClick(props.card);\r\n  }\r\n\r\n  function handleLikeClick() {\r\n    props.onCardLike(props.card);\r\n  }\r\n\r\n  return (\r\n    <article className=\"card\">\r\n      <button\r\n        type=\"button\"\r\n        className=\"card__remove-button\"\r\n        aria-label=\"Удалить\"\r\n      ></button>\r\n      <div className=\"card__image-container\">\r\n        <img\r\n          src={props.card.link}\r\n          alt={props.card.name}\r\n          className=\"card__image\"\r\n          onClick={handleClick}\r\n        />\r\n      </div>\r\n      <div className=\"card__description\">\r\n        <h2 className=\"card__title\">{props.card.name}</h2>\r\n        <div className=\"card__like-container\">\r\n          <button\r\n            type=\"button\"\r\n            aria-label=\"Лайк\"\r\n            className=\"card__like-button\"\r\n            onClick={handleLikeClick}\r\n          ></button>\r\n          <p className=\"card__like-count\">{props.card.likes.length}</p>\r\n        </div>\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","E:\\1code\\mesto-react\\src\\utils\\Api.js",[],"E:\\1code\\mesto-react\\src\\contexts\\CurrentUserContext.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":12,"column":3,"nodeType":"60","messageId":"61","endLine":14,"endColumn":4},{"ruleId":"58","severity":1,"message":"59","line":49,"column":3,"nodeType":"60","messageId":"61","endLine":51,"endColumn":4},{"ruleId":"58","severity":1,"message":"59","line":8,"column":3,"nodeType":"60","messageId":"61","endLine":10,"endColumn":4},{"ruleId":"58","severity":1,"message":"59","line":9,"column":3,"nodeType":"60","messageId":"61","endLine":11,"endColumn":4},{"ruleId":"62","severity":1,"message":"63","line":12,"column":9,"nodeType":"64","messageId":"65","endLine":12,"endColumn":34},{"ruleId":"58","severity":1,"message":"59","line":16,"column":3,"nodeType":"60","messageId":"61","endLine":18,"endColumn":4},{"ruleId":"62","severity":1,"message":"66","line":20,"column":9,"nodeType":"64","messageId":"65","endLine":20,"endColumn":32},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unused-vars","'cardRemoveButtonClassName' is assigned a value but never used.","Identifier","unusedVar","'cardLikeButtonClassName' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]